// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModelLibrary_Estore_1;

namespace ModelLibrary_Estore_1.Migrations
{
    [DbContext(typeof(db_Enterprise_Store_Context))]
    [Migration("20210215074805_INPUT_rows_with_defaulValue")]
    partial class INPUT_rows_with_defaulValue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ModelLibrary_Estore_1.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("BrandId");

                    b.HasIndex(new[] { "BrandName" }, "UK_BrandName")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Counterparty", b =>
                {
                    b.Property<int>("CounterpartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CounterpartyName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long?>("InnOgrnKpp")
                        .HasColumnType("bigint");

                    b.HasKey("CounterpartyId");

                    b.ToTable("Counterpartys");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Personnel", b =>
                {
                    b.Property<int>("PersonnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PersonnelName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("PersonnelId");

                    b.ToTable("Personnels");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.PersonnelsInfo", b =>
                {
                    b.Property<long?>("Passport")
                        .HasColumnType("bigint");

                    b.Property<int>("PersonnelsPersonnelId")
                        .HasColumnType("int");

                    b.HasIndex(new[] { "PersonnelsPersonnelId" }, "IX_PersonnelsInfo_PersonnelsPersonnelId");

                    b.HasIndex(new[] { "PersonnelsPersonnelId", "Passport" }, "UK_Passport_PersonnelsPersonnelId")
                        .IsUnique()
                        .HasFilter("[Passport] IS NOT NULL");

                    b.ToTable("PersonnelsInfo");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandsBrandId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<double?>("ProductSale")
                        .HasColumnType("float");

                    b.Property<int?>("ProductsGroupsProductGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitsIdUnit")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "BrandsBrandId" }, "IX_Products_BrandsBrandId");

                    b.HasIndex(new[] { "ProductsGroupsProductGroupId" }, "IX_Products_ProductsGroupsProductGroupId");

                    b.HasIndex(new[] { "UnitsIdUnit" }, "IX_Products_UnitsIdUnit");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.ProductsGroup", b =>
                {
                    b.Property<int>("ProductGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductGroupName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("ProductGroupId");

                    b.HasIndex(new[] { "ProductGroupName" }, "UK_ProductGroupName")
                        .IsUnique();

                    b.ToTable("ProductsGroups");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.ProductsGroupsSale", b =>
                {
                    b.Property<int>("ProductsGroupsProductGroupId")
                        .HasColumnType("int");

                    b.Property<double>("Sale")
                        .HasColumnType("float");

                    b.HasIndex(new[] { "ProductsGroupsProductGroupId" }, "IX_ProductsGroupsSales_ProductsGroupsProductGroupId");

                    b.ToTable("ProductsGroupsSales");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Realization", b =>
                {
                    b.Property<int>("RealizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CounterpartysCounterpartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PersonnelsPersonnelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("StoragesStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("RealizationId");

                    b.HasIndex(new[] { "CounterpartysCounterpartyId" }, "IX_Realizations_CounterpartysCounterpartyId");

                    b.HasIndex(new[] { "PersonnelsPersonnelId" }, "IX_Realizations_PersonnelsPersonnelId");

                    b.HasIndex(new[] { "StoragesStorageId" }, "IX_Realizations_StoragesStorageId");

                    b.ToTable("Realizations");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.RealizationPriceQty", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RealizationId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceSelling")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("ProductId", "RealizationId")
                        .HasName("PK_Realization_Products");

                    b.HasIndex(new[] { "ProductId" }, "IX_RealizationPriceQtys_ProductId");

                    b.HasIndex(new[] { "RealizationId" }, "IX_RealizationPriceQtys_RealizationId");

                    b.ToTable("RealizationPriceQtys");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StorageName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("StorageId");

                    b.HasIndex(new[] { "StorageName" }, "UK_StorageName")
                        .IsUnique();

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Supply", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CounterpartysCounterpartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((2))");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StoragesStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("SupplyId");

                    b.HasIndex(new[] { "CounterpartysCounterpartyId" }, "IX_Supplies_CounterpartysCounterpartyId");

                    b.HasIndex(new[] { "StoragesStorageId" }, "IX_Supplies_StoragesStorageId");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.SupplyPriceQty", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePurchase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("ProductId", "SupplyId")
                        .HasName("PK_SupplyId_Products");

                    b.HasIndex(new[] { "ProductId" }, "IX_SupplyPriceQtys_ProductId");

                    b.HasIndex(new[] { "SupplyId" }, "IX_SupplyPriceQtys_SupplyId");

                    b.ToTable("SupplyPriceQtys");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Unit", b =>
                {
                    b.Property<int>("IdUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasDefaultValueSql("(N'шт')");

                    b.HasKey("IdUnit");

                    b.HasIndex(new[] { "UnitName" }, "UK_UnitName")
                        .IsUnique();

                    b.ToTable("Units");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.PersonnelsInfo", b =>
                {
                    b.HasOne("ModelLibrary_Estore_1.Personnel", "PersonnelsPersonnel")
                        .WithMany()
                        .HasForeignKey("PersonnelsPersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonnelsPersonnel");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Product", b =>
                {
                    b.HasOne("ModelLibrary_Estore_1.Brand", "BrandsBrand")
                        .WithMany("Products")
                        .HasForeignKey("BrandsBrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ModelLibrary_Estore_1.ProductsGroup", "ProductsGroupsProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductsGroupsProductGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ModelLibrary_Estore_1.Unit", "UnitsIdUnitNavigation")
                        .WithMany("Products")
                        .HasForeignKey("UnitsIdUnit")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BrandsBrand");

                    b.Navigation("ProductsGroupsProductGroup");

                    b.Navigation("UnitsIdUnitNavigation");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.ProductsGroupsSale", b =>
                {
                    b.HasOne("ModelLibrary_Estore_1.ProductsGroup", "ProductsGroupsProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductsGroupsProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductsGroupsProductGroup");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Realization", b =>
                {
                    b.HasOne("ModelLibrary_Estore_1.Counterparty", "CounterpartysCounterparty")
                        .WithMany("Realizations")
                        .HasForeignKey("CounterpartysCounterpartyId")
                        .IsRequired();

                    b.HasOne("ModelLibrary_Estore_1.Personnel", "PersonnelsPersonnel")
                        .WithMany("Realizations")
                        .HasForeignKey("PersonnelsPersonnelId")
                        .IsRequired();

                    b.HasOne("ModelLibrary_Estore_1.Storage", "StoragesStorage")
                        .WithMany("Realizations")
                        .HasForeignKey("StoragesStorageId")
                        .IsRequired();

                    b.Navigation("CounterpartysCounterparty");

                    b.Navigation("PersonnelsPersonnel");

                    b.Navigation("StoragesStorage");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.RealizationPriceQty", b =>
                {
                    b.HasOne("ModelLibrary_Estore_1.Product", "Product")
                        .WithMany("RealizationPriceQties")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("ModelLibrary_Estore_1.Realization", "Realization")
                        .WithMany("RealizationPriceQties")
                        .HasForeignKey("RealizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Realization");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Supply", b =>
                {
                    b.HasOne("ModelLibrary_Estore_1.Counterparty", "CounterpartysCounterparty")
                        .WithMany("Supplies")
                        .HasForeignKey("CounterpartysCounterpartyId")
                        .IsRequired();

                    b.HasOne("ModelLibrary_Estore_1.Storage", "StoragesStorage")
                        .WithMany("Supplies")
                        .HasForeignKey("StoragesStorageId")
                        .IsRequired();

                    b.Navigation("CounterpartysCounterparty");

                    b.Navigation("StoragesStorage");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.SupplyPriceQty", b =>
                {
                    b.HasOne("ModelLibrary_Estore_1.Product", "Product")
                        .WithMany("SupplyPriceQties")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("ModelLibrary_Estore_1.Supply", "Supply")
                        .WithMany("SupplyPriceQties")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Counterparty", b =>
                {
                    b.Navigation("Realizations");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Personnel", b =>
                {
                    b.Navigation("Realizations");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Product", b =>
                {
                    b.Navigation("RealizationPriceQties");

                    b.Navigation("SupplyPriceQties");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.ProductsGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Realization", b =>
                {
                    b.Navigation("RealizationPriceQties");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Storage", b =>
                {
                    b.Navigation("Realizations");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Supply", b =>
                {
                    b.Navigation("SupplyPriceQties");
                });

            modelBuilder.Entity("ModelLibrary_Estore_1.Unit", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
